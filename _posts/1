

//基于互信息和左右信息熵实现短语抽取//
for (Entry<string, MIAndEntropyBeans>entry : wordsMap.entryset())
{
    //计算互信息
    string wordAtraystring = entry.getkey ();
    //获得总的词语计数
    int wordArrayCount = entry.getvalue().getWordount () ;
    String rightWordstring = entry.getvalue().getRightWord();
    String leftWordSrtring = entry.getvalue().getLeftWord();
    double leftWordCount = wordcouptMap.get(leftWordString);
    double rightWordCount = wordCountMap.get(rightWordString);
    double MI =
    (wordArrayCount/totalwordArrays)/((leftWordCount /totalWords)*
    (rightWordCount/totalWords));
    //计算左信息熵
    double leftSum = getEntropy (leftEntropyMap, rightwordString);
    //计算右信息熵
    double rightSum = getEntropy(rightEntropyMap, leftWordString);
    //最终的权值
    double weightSum = MI + 1eftSum + rightSum;
    resultMap.put(wordArrayString,weightSum);
}
private static double getEntropy(Map<string,Map<String,Double>> leftEntropyMap,
String rightWordstring)
    {
    double leftSum = 0.0;
    Map<String,Double > leftMap = leftEntropyMap.get (rightWordstring);
    double total = leftMap.get (WORD_COUNT) ;
    //计算信息熵
    for (Entry<string,Double> entry3: leftMap.entrySet ())
    {
    leftSum += 1.0 +
    entry3.getvalue () /total*Math.log(entry3.getalue(()/total) ;
    }
    return leftSum;
   }
